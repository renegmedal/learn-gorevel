

http://revel.github.io/manual/



$ cd /Users/rene/System/GO/src/pizzastore
$ revel run pizzastore


http://localhost:9000/app/createaccount


6. Other Concepts


        A. Using i18n

Message File Organization

app/
    messages/
             labels.en
             warnings.en
             labels.fr
             warnings.fr


Message Files Format

key = value

greeting=Hello

greeting.name_arg=Hello %s!

greeting.name=Rob

greeting.suffix=, welcome to Revel!

greeting.fule=%(greeting)s %(greeting.name)s%(greeting.suffix)


Implementation through code:

  c.Message("key", ...arguments)

Implementation through template:

{{msg . "key" ...arguments}}




        B. Testing Structure

myapp/
      app/
      conf/
      public/
      tests/


type MyAppTest struct {
  revel.TestSuite
}

func (t *MyAppTest) Before() {} // run before each test

func (t *MyAppTest) After() {} // run after each test

func (t *MyAppTest) Test...() {} // tests start with "Test"

           Test API

1. HTTP Requests
    MakeRequest
    MakeRequestSession
    Post
    PostForm
    Get
    Delete
    WebSocket

2. Request Inspection
    BaseUrl
    Host
    WebSocketUrl





          C. Assertion API

Assert

AssertContains

AssertContainsRegex

AssertEqual

AssertContentType

AssertHeader

AssertOk - Ok status

AssertStatus


          D. Running Tests

1. Interactive - fire up a web browser

    http://pathtoapp/@tests


    2-step process to register test runner

    // app.conf

    module.testrunner = github.com/revel/modules/testrunner


    // routes

    module:testrunner


2. Non-interactive (for continuous integration)

    // on the command line

    revel test path/to/app dev      //test the entire application

    revel test path/to/app dev SuiteTest  //run the single test file

    revel test path/to/app dev SuiteTest.TestFoo  //single method test


          E. Caching

Using memcache

Using redis

Using in-memory


import "github.com/revel/revel/cache"

//retrieve a value

var product Product

err := cache.Get("key", &product)


//store a value

cache.Set("key", product, 30 * time.Minute)




          F. Cron Jobs

Use in heartbeat, cleaning or moving logs, etc

Startup Jobs

Recurring Jobs

Named Schedules - run specific action

One-off Jobs - recognize certain action and spawns a cron job


1. Registering a Job - AppStart

func init() {

  revel.OnAppStart(func() {
    /*do stuff at startup
  })

}

type Job interface {
  Run()
}


2. Registering a Job - Recurring Jobs

import "github.com/revel/modules/jobs/app/jobs"

func init() {
  revel.OnAppStart( func() {

    jobs.Schedule("@midnight", MyJob{})  //call a job by specific time

    jobs.Every(24 * time.Hour, MyJob{})  //call a job by time interval

  })
}

3. Registering a Job - Named Schedule

Useful when you need same schedule that need to apply to multiple jobs.

//app.configuration

cron.custom_schedule = 0 */15 9-17 ? * MON*FRI

func init() {

  revel.OnAppStart(func(){

    jobs.Schedule("cron.customer_schedule", MyJob{})

  })
}

4. Registering a Job - One-off Jobs

// schedule now, but run asynchronously

jobs.Now(MyJob{})

- another way

// run async in the future

jobs.In(5 * time.Minute, MyJob{})


Monitoring Jobs

http://pathtoapp/@jobs

//app.conf

module.jobs = github.com/revel/modules/jobs

//routes
module:jobs
